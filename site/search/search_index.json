{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Install Turn pieces of ANSI, ASCII, and NFO documents into HTML. RetroTxt is the browser Extension that takes legacy and plain text files and stylizes them into a more acceptable, valid format to view or copy from a web browser tab. View ANSI, ASCII, NFO, Shift JIS text art as HTML View server, system, and dev-op logs styled with colored text View BBS colored text files for Celerity, PC Board, Renegade, Telegard, Wildcat!, WVIV systems Install to Chrome Install to Edge Install to Firefox Or use the GNU LGPLv3 source code. Showcase Raw text Fonts Display Extra info Text editor View ANSI colored text in a browser Toggle back to the raw text view Choose from hundreds of fonts to style ASCII texts Descriptive and simple to use options Optional, extra details for each text file Copy the output of RetroTxt and paste it into a standard text editor Features Swappable palettes for different color simulations VGA, CGA, Unix xterm, Apple IIgs, Commodore 64, monochrome and switchable iCE Colors Customizable font and background colors SAUCE metadata parsing Support for multiple text encodings MS-DOS CP-437, Amiga ISO-8959-1, Windows 1252, Japanese Shift-JIS Automatic fixes for block character and line artifacts Hundreds of IBM PC font choices VGA, EGA, CGA, MDA, PS/2, and more Various Amiga and microcomputer fonts From Commodore, Atari, Apple, Tandy, and more Open-source","title":"Install"},{"location":"#install","text":"Turn pieces of ANSI, ASCII, and NFO documents into HTML. RetroTxt is the browser Extension that takes legacy and plain text files and stylizes them into a more acceptable, valid format to view or copy from a web browser tab. View ANSI, ASCII, NFO, Shift JIS text art as HTML View server, system, and dev-op logs styled with colored text View BBS colored text files for Celerity, PC Board, Renegade, Telegard, Wildcat!, WVIV systems Install to Chrome Install to Edge Install to Firefox Or use the GNU LGPLv3 source code. Showcase Raw text Fonts Display Extra info Text editor View ANSI colored text in a browser Toggle back to the raw text view Choose from hundreds of fonts to style ASCII texts Descriptive and simple to use options Optional, extra details for each text file Copy the output of RetroTxt and paste it into a standard text editor","title":"Install"},{"location":"#features","text":"Swappable palettes for different color simulations VGA, CGA, Unix xterm, Apple IIgs, Commodore 64, monochrome and switchable iCE Colors Customizable font and background colors SAUCE metadata parsing Support for multiple text encodings MS-DOS CP-437, Amiga ISO-8959-1, Windows 1252, Japanese Shift-JIS Automatic fixes for block character and line artifacts Hundreds of IBM PC font choices VGA, EGA, CGA, MDA, PS/2, and more Various Amiga and microcomputer fonts From Commodore, Atari, Apple, Tandy, and more Open-source","title":"Features"},{"location":"SUPPORT/","text":"F.A.Q. - Common questions and fixes To ask a question, report a bug, or request a feature, please feel free to leave a new issue on the GitHub repository or mail . Can I adjust the size of the font? You can change the zoom of the font by using the Ctrl + and Ctrl - keys. Can I view files stored on my computer? Many browsers are quite happy to read files and directories stored locally on your computer by typing a path into the address bar. On Windows, for example, pasting C:\\Users\\Ben\\Downloads\\myfile.txt into Chrome, Brave, Edge, and Firefox will convert it into a browser-friendly file URI and view the document in the browser. file:///C:/Users/Ben/Downloads/myfile.txt You can also browse your Windows drive file:///C:/ . Or your Linux and macOS drive file:/// . The feature is enabled in the Options , Settings tab by either having the Use RetroTxt as a local text file viewer or Monitor downloads enabled. All browsers except Firefox will also need to Allow access to the file URLs permission enabled ( chrome://extensions/ ) if you want it to work with local files. What are the text encodings supported? Please see the Supported standards document . Garbled text? There could be many causes of this, but it is generally related to the web server or browser choosing the incorrect character encoding for the file. Firefox In the browser, press ALT v and select Text Encoding . Choose a more suitable character encoding, but if you are not quite sure which one to use but the document is in English. First, try the Unicode (UTF-8) then each of the other Western options. All other browsers Without using a 3rd-party Extension, Chrome , Brave , and Edge cannot switch the character encoding. You could also manually switch the transcoding RetroTxt applies by right-clicking on the page and select Transcode text from the RetroTxt context menu. Context menu","title":"FAQ"},{"location":"SUPPORT/#faq-common-questions-and-fixes","text":"To ask a question, report a bug, or request a feature, please feel free to leave a new issue on the GitHub repository or mail .","title":"F.A.Q. - Common questions and fixes"},{"location":"SUPPORT/#can-i-adjust-the-size-of-the-font","text":"You can change the zoom of the font by using the Ctrl + and Ctrl - keys.","title":"Can I adjust the size of the font?"},{"location":"SUPPORT/#can-i-view-files-stored-on-my-computer","text":"Many browsers are quite happy to read files and directories stored locally on your computer by typing a path into the address bar. On Windows, for example, pasting C:\\Users\\Ben\\Downloads\\myfile.txt into Chrome, Brave, Edge, and Firefox will convert it into a browser-friendly file URI and view the document in the browser. file:///C:/Users/Ben/Downloads/myfile.txt You can also browse your Windows drive file:///C:/ . Or your Linux and macOS drive file:/// . The feature is enabled in the Options , Settings tab by either having the Use RetroTxt as a local text file viewer or Monitor downloads enabled. All browsers except Firefox will also need to Allow access to the file URLs permission enabled ( chrome://extensions/ ) if you want it to work with local files.","title":"Can I view files stored on my computer?"},{"location":"SUPPORT/#what-are-the-text-encodings-supported","text":"Please see the Supported standards document .","title":"What are the text encodings supported?"},{"location":"SUPPORT/#garbled-text","text":"There could be many causes of this, but it is generally related to the web server or browser choosing the incorrect character encoding for the file.","title":"Garbled text?"},{"location":"SUPPORT/#firefox","text":"In the browser, press ALT v and select Text Encoding . Choose a more suitable character encoding, but if you are not quite sure which one to use but the document is in English. First, try the Unicode (UTF-8) then each of the other Western options.","title":"Firefox"},{"location":"SUPPORT/#all-other-browsers","text":"Without using a 3rd-party Extension, Chrome , Brave , and Edge cannot switch the character encoding. You could also manually switch the transcoding RetroTxt applies by right-clicking on the page and select Transcode text from the RetroTxt context menu. Context menu","title":"All other browsers"},{"location":"build/","text":"Building RetroTxt Windows Tasks do not run on PowerShell , Windows users should use Windows Subsystem for Linux. Clone, initialize and branch the repo gh repo clone bengarrett/RetroTxt cd RetroTxt task init # Create a dev branch git checkout -b dev # Create a pull request to merge the dev branch into main gh pr create gh pr status gh pr merge Package dependencies to newer versions yarn outdated yarn upgrade-interactive --latest Update VERSION stamp edit Taskfile.yml vars: VERSION: \"0.0.0\" # apply VERSION stamp to the manifest and package json files. task version-set # or set the VERSION and then submit to GitHub task commit Store submissions Build artifacts location RetroTxt/web-ext-artifacts/ Chrome developer dashboard Firefox Add-on developer hub Microsoft Edge Developer","title":"Building"},{"location":"build/#building-retrotxt","text":"Windows Tasks do not run on PowerShell , Windows users should use Windows Subsystem for Linux.","title":"Building RetroTxt"},{"location":"build/#clone-initialize-and-branch-the-repo","text":"gh repo clone bengarrett/RetroTxt cd RetroTxt task init # Create a dev branch git checkout -b dev # Create a pull request to merge the dev branch into main gh pr create gh pr status gh pr merge","title":"Clone, initialize and branch the repo"},{"location":"build/#package-dependencies-to-newer-versions","text":"yarn outdated yarn upgrade-interactive --latest","title":"Package dependencies to newer versions"},{"location":"build/#update-version-stamp","text":"edit Taskfile.yml vars: VERSION: \"0.0.0\" # apply VERSION stamp to the manifest and package json files. task version-set # or set the VERSION and then submit to GitHub task commit","title":"Update VERSION stamp"},{"location":"build/#store-submissions","text":"Build artifacts location RetroTxt/web-ext-artifacts/","title":"Store submissions"},{"location":"build/#chrome-developer-dashboard","text":"","title":"Chrome developer dashboard"},{"location":"build/#firefox-add-on-developer-hub","text":"","title":"Firefox Add-on developer hub"},{"location":"build/#microsoft-edge-developer","text":"","title":"Microsoft Edge Developer"},{"location":"changes/","text":"RetroTxt Changes 4.2 October 2021 Squared 1:1, 8x8 pixel PC fonts now use their -2y variants when available. The 2y variants are 16x16 in size, meaning they're easier to read and look better. 11 new color themes for the Options tab under Settings. Replaced deprecated API function, extension.getURL() . Fixed broken elements in options.html . 4.1 June 2021 Updated PC and MS-DOS fonts to Ultimate Oldschool PC Font Pack v2.2. Support for custom ports in URLs such as http://localhost:8080 or https://example.com:9999 . Replaced all the woff fonts with woff2 fonts to offer better file compression. This reduces the overall file size of RetroTxt and system resource usage. The Options Fonts tab Jump to menu now always remains on the tab. Reduced page flicker when switching Options tabs. Fixed broken Apple Lisa fonts. Fixed the local file viewer toggling on non-text file tabs when the file's extension is in uppercase. Fixed certain fonts that use spaces within their names, breaking the loading text files. Fixed broken SAUCE IBM VGA50 font. Improved support and display of multiline SAUCE comments. Improve the positioning of the error alert box. Spelling and typo fixes for both UK and US English. Using Task for the build process. Dropped the use of the convoluted Node.createTextNode() and Node.appendChild() methods. 4.0 Highlights Complete Options redesign, it loads in a tab and is identical across all browsers. Welcome tab features is merged into the Options tab. Refreshed the information header. 200+ PC/MS-DOS system fonts. Numerous new fonts for home computers. Improved the font representation for SAUCE fontname matching. Dropped the context menu functionality and replaced it with Option tab links. Omnibox support, type rt space in the browser address bar to see the list of commands. October 2020 The font choice save is reset. Minimum Chrome requirement v72, minimum Firefox requirement v69. Improved compatibility with Amiga ANSI. Added Unscii fonts fantasy and MCR. Added PR Number 3 (Apple II). Added Apple IIGS Shaston system fonts. Added Apple GEOS Berkelium fonts. Added Pet Me Commodore 64 fonts. Added Tandy TRS-80 and CoCo fonts. Added IBM 3270 font. Added new Workbench ANSI theme. Updated Print Char 21 font (Apple II). Updated Unscii fonts to v2.0. Updated Plex Mono fonts plus new weights. Changed references to web-extension, web extension, WebExtension to Extension, with a capital E. Moved documentation from the barebones Wiki into /docs and https://docs.retrotxt.com. Options in Chrome uses a dedicated browser tab. Options in Chrome implements Bulma as a CSS framework for a larger and improved layout. Added content-visibility CSS attribute for Chrome 85+ to help improve large screen rendering, see issue #91 . Added showBrowser(), links to the Edge Add-ons page, issue #78 . Replaced all Material Design Icon fonts with individual SVG images. This improves icon resize scalability and user accessibility, see issue #92 . Fixed eventpage.js invoke() , checks the lastError value, this also fixes issue #93 . Fixed the broken toolbar icon swap when Chrome detects a system dark mode theme. Updated dev dependencies and libraries. Moved the programming code and assets of the Extension into /ext . Removed Windows PowerShell source code support, instead Windows users can use WSL. Removed 'API permissions granted' from the Options as it duplicates included browser features. Renamed Storage class to LocalStore to avoid browser API conflicts. Context menus code were difficult to maintain and inconsistent between browsers. Unified pages to use LF instead of CRLF. Added support for ECMA48 SGR20 Fraktur font. 3.5 March 2020 Added Spleen font support. Added Microsoft Edge browser support. Added Microsoft Edge Addons links. Improved compatibility with Blocktronics Blocky Horror & dsotb packs. Added labels to for() loops. Added hidepassed argument to QUnit test links. Added Chrome and Edge browser version info to welcome.html. isNum() now intentionally points to either to the Number function. Fixed stylesheets not being loaded for BBS coloured text formats. Fixed broken DOM() class unit test. Fixed New width byte sequence 80 console message. Fixed colorpalette() causing errors with non-ANSI art. Fixed missing Unscii credit on the Firefox Options About tab. Fixed 'Font family used for display' title mislabelling some fonts. Reduced the width of the Options menu buttons to better fit with Edge. 3.4.2 October 2019 Created an ANSI tab in the options. Created Default color palette selection option. Added links in the welcome page for extension-app store reviews. Replaced Download API console warnings on startup with logs. 3.4 August 2019 Improved compatibility with wide, 80+ column ANSI art. Improved compatibility with narrow, -80 column ANSI art. Much improved compatibility with late 1990s, 80 column ANSI art. Added new Display Option \"Smear block characters\" that applies CSS text-shadowing specifically on CP-437 block characters to reduce line artefacts on Windows operating systems. Added Celerity BBS | color codes support. Added Renegade BBS | color codes support. Added Telegard BBS ` color codes support. Added WVIV BBS |# pipe code support. Added WVIV BBS \u2665 heart code support. Added Apple IIgs and Commodore 64 palettes for 4-bit ANSI. Blinking text now works properly on non-black backgrounds. Change minimum Chromium version to 58. Simplified some of the JS source code. Horizontal tab C0 codes in ANSI art now always display the \u25cb character when DOS control glyphs is enabled. Test case blocktronics_block_n_roll/die-already.ans Improved the accuracy of parsing of iCE color ANSIflags. Changed the ANSI slow blink timing (SGR5) to 500ms and fast blink (SGR6) to 300ms. Default CSS line-height value switched from 100% to normal for better compatibility with alt-fonts. Consolidated iCE Colors and VGA CSS classes to reduce duplication. Fixed issue 71 with the incorrect colour rendering of some RGB values. Fixed ultrawide ANSI art wrapping to the browser tab instead of overflowing with scrollbars. Fixed critical issue where a corrupt SAUCE font value breaks the ANSI render. Test case blocktronics_block_n_roll/nu-ninja_cat.ans Fixed welcome page not displaying Configure RetroTxt and Permissions Request example images. Fixed @CLS@ , it now does not automatically assume a PCBoard @-code file. Fixed > < and & characters breaking the end-of-line character count in ANSI text. Fixed RetroTxt unintentionally triggering when the browser plays audio/video media using file:/// URLs. Fixed Firefox Options sample text displaying a white shadow effect in Normal render mode . Renamed /docs/ directory to /md/ , most of the documentation is now located at the Wiki . Replaced non-working textmod.es/crew links with 16colo.rs/tags/group . Removed the Smeared text render toggle as it has been replaced with the Smear block characters setting. Removed the Focus mode as the technical debt to maintain was too high. Removed theme and display adjustments from the context menus to simplify the code. 3.3 June 2019 Added a Focus mode toggle. Added Unscii 8 and Unscii 16 font support. Added Line wrap toggle to the information header when displaying ANSI/ECMA-48 text. Added preferred dark mode support for Chrome/Chromium 67+ browsers. Significantly reduced the tab memory usage after rendering ANSI/ECMA-48 text. Dropped the use of null in all large, internal arrays which should slightly improve performance with the JavaScript V8 engine. Significantly reduced the console spam when undetected ANSI control sequences are found. Refactored scripts\\parse_ansi.sys to use ES5 Class expressions so the source code easier to follow. Added support for the following ECMA-48 controls. CHT Cursor Forward Tabulation, it acts as 4 forward space movements. Changed the horizontal behaviour of the ECMA-48 HVP command, it will now wrap to the maximum columns limit and then continue on the new row. Greatly expanded the unit test coverage of parse_ansi.js. Fixed, duplicate downloads are triggering with some binary file types such as woff fonts. Fixed, Save link as accidentally creating a new, empty file:/// tab. Fixed ECMA-48 CUD bug where there were too many rows created. An error is now displayed when trying to load a file:/// with no content. 3.2 February 2019 Added IBM AIX terminal bright and bold colour support. Improved Allow access to file URLs is disabled notification to be more prominent. Added npm run scripts to the package.json. npm run build npm run firefox npm run lint npm run version Fixed Downloads.listen() causing an endless download loop (issue #56). Fixed hideEntities() not catching <> character combinations that broke ANSI rendering (issue #58). Fixed the Options Apply RetroTxt to any local text files file:/// link pointing to the C: drive on Linux and macOS. 3.1 December 2018 Re-added the ability to make additions to the Apply RetroTxt to text files hosted on these websites list that was disabled in v3.0. Fixed the Zeus II logo for the welcome screen breaking on Linux. Fixed Homepage URL in the Firefox addon tab. Fixed incorrect links in README.md . 3.0 Highlights User interface improvements and bug fixes. Much improved legacy code page detection and support. New progressive permissions for enhanced security. New redesign of the Options menu. New ASCII text theme for your own custom background/foreground colours. November 2018 Rewrote the Code Page 437 normaliser, the character conversions are more accurate. RetroTxt gracefully recovers after the unintentional deletion of storage items. RetroTxt out of the box is locked down with gradual permission privileges requests when features are enabled. Previously RetroTxt always had access to downloads, http/ftp tabs, etc. regardless of whether they were needed or not. However, these are moving to optional_permissions which grant access on an associated Option. Broad http://*/ and https://*/ read permissions are gone in favour of domain-specific access such as https://retrotxt.com/* and http://retrotxt.com/* . RetroTxt never read more than the first two characters of any HTML tab that is active, but it was not a good look for new users seeing Read and change all your data on the websites that you visit in the add-ons menu. Redesigned the Options menu to better match the new user interface introduced in Chrome v69. This required the disabling of the chrome_style manifest UI option which hasn't been updated since early 2016. Added a privacy policy with API permission requirements. Added Option to use a customised colour set for the text foreground and background. Added IBM's 2017 Plex Mono font . Added Macintosh-Roman, ISO8859-10 code page support. Mouse hovering on the information header font name reveals more descriptive font information. Added Option to toggle blinking text and cursor animations. Added a textmod.es/crew link to SAUCE header data for some ANSI groups when their group data are matches in the SAUCE metadata. Added new icons for Firefox dark themes. Firefox uses SVG icons. Center align text now previews in the sample text. RetroTxt browser toolbar button now behaves differently to avoid occasional false positives. Instead of disabling itself when an invalid page is detected, the button now shows a \u2714 checkmark whenever a compatible tab is active. The compatibility results vary based on the Extension permissions grants. Fixed PCBoard & Wildcat BBS colour inaccuracies in the CSS. Remapped CGA palettes so black is less frequent. Text that lack line breaks now wrap to the browser tab. CSS variables are more frequently in use. Added install type detection that enables a verbose mode when the type is development . Source code uses Prettier for opinionated formatting. Refactored most of the JS to use ES5 Class expressions so the source code easier to follow. It is still a TODO item for parse_ansi.js . Using separate manifest.json and options.html for Firefox and Chrome. The Chrome Extension API hasn't been updated since early 2016 and is now the legacy implementation. Saves the Options last active tab. Expanded the number of unit tests to cover more of the application. Fixed incorrect keyboard keys displayed on alerts with macOS. Fixed Options icons links with underlined artefacts in Chrome. Fixed Options now gracefully handle the removal of localStorage items. Fixed broken Options links when in development install type. Known issues Currently, you cannot make additions to the Apply RetroTxt to text files hosted on these websites list. The problem is due to new permissions API implementation that requires all sites to be listed in the manifest.json . On Firefox 63 the Options fonts menu sprawls across the screen, this is fixed in version 64. On Firefox Linux the Zeus II logo for the welcome screen is broken. For some distributions with Firefox on Linux the select menus have extra large, unreadable fonts. 2.5 March 2018 Added Shift JIS support that will toggle the use of the Mona font when encountered. Added an ANSI 80 column wrap checkbox option that lets you disable this feature. Added 2-bit IBM CGA palette 0 (brown/yellow). Welcome.html has been reworked and uses tooltips on links. Improved CSS font-stack for system fonts that should look better on all operating systems. Context menu now uses radio buttons instead of tick glyphs. Console output is now grouped and collapsed by default to reduce message spam. Improved rendering of PCBoard art with alternative fonts. Regenerated internal fonts to the woff2 format to reduce the download and install size of the Extension. Fixed context menu issues. Fixed unsupported ECMA-48 controls reported as unknown. Fixed blinking cursor not positioning correctly on small ANSI documents. Fixed text render methods not applied to ANSI documents. Fixed white background themes that were not showing ECMA-48 bold text due to foreground and backgrounds colours being the same. 2.4 September 2017 Added Linux and IBM PS/2 context menu themes. Added Browser monospace font (called fixed-width in Chrome). ASCII documents now obey SAUCE fontName value. Redesigned some of the context menus. Added a \u25b2 hide \u25bc show toggle for the header. Added 1x and 2x font size adjust toggle in the header. Welcome page displays a RetroTxt updated banner that can also be turned off. Requires Firefox 55. Links in the header are not selectable to stop accidental selection when clicked. Replaced columns/lines statistics in the header with total pixel width/length. Fixed Blink engine handling of ANSI when it mistakenly sees it as ISO-8859-5 instead of Windows-1252. Fixed broken preview images in welcome.html . Fixed SAUCE font issue where it requests Amiga Plus fonts but uses standard. Fixed Some wider fonts break the ASCII text document layout . Fixed SAUCE font P0T-NOoDLE value not registering. ANSI maximum columns are now uncapped when SAUCE TInfo1 data is corrupted by the browser. Internal optimisations. Replaced XMLHttpRequest() with FetchAPI . Dropped the generation of elements using dom.innerHTML = text (except in parse_ansi.js ). Removed all remaining var usage. Replaced many let variables with const objects. Renamed some variables, so they are clearer in their purpose. Removed some unused functions and objects. 2.3 August 2017 Added 24-bit RGB colour support for ANSI/ECMA-48 text. That gives a choice of over 16 million colours to play with. New fonts, a complete set of Amiga and ATASCII (Atari 8-bit). Complete SAUCE FontName support. Added 2-bit IBM CGA magenta palette. Added Option checkbox, 'ANSI iCE colors'. Fixed some CP437 characters not displaying as intended. Fixed issue where 'DOS control glyphs' changes required two tab refreshes to apply. Any discovered SAUCE configurations are sent to the browser console. Browser tab titles running RetroTxt are marked with [\u00b7\u00b7] . 2.2 June 2017 There are new clickable toggles in the information header for ANSI art. Normal switches the active tab text rendering between Normal , Smeared and Shadowed . IBM switches the ANSI 16 color palette between IBM VGA, Unix xterm and gray scale. On toggles between iCE background colors and blinking text. Added a new Option, Text render , choices are Normal , Smeared , Shadowed . Increased minimum version requirements for both Chrome and Firefox to 51. Added support for CP-1250 and CP-1251 text encodings that are occasionally used by Chrome over the expected CP-1252. Fixed header not displaying when using white background themes. To improve performance <links> to CSS files are disabled instead of removed when toggling between plain text and HTML displays. The shortcut key combination has been switched from ALT+T to ALT+R to stop Firefox conflicts. Fixed ECMA48 SGR2 and SGR3 controls using the wrong CSS properties. 2.1 March 2017 Performance optimisations to reduce the memory footprint and improve rendering speed. ECMA48/ANSI iCE colors support. Automatic parsing and execution of SAUCE ANSiFlags . Added Atari ST TOS font and theme. Text and font information header now conveys more information and uses CSS position: sticky; . JavaScript refactor to be ESlint compliant . Uses more ES6 features such as arrow functions and for-of loops. Improved error handling and user feedback when the addon or Extension API fails. Improved embedded SAUCE detection . Fixed ECMA48/ANSI bug that dropped the first row of text. Fixed mixed ANSI/ASCII documents issue that didn't parse the ECMA48 control characters. Fixed < > and & characters breaking ANSI display thanks to browser HTML entity conversions. Fixed @CLS@ bug in PCBoard detection. Fixed HVP and CUP execution. 2.0 November 2016 Detects and converts many ANSI Control Sequence Introduces used by MS-DOS ANSI.SYS to display ANSI art. Detects and converts legacy BBS colour codes for PCBoard and Wildcat! . Apply RetroTxt to any text files hosted on these websites will only run on a user supplied whitelist of website domains. This will stop it from conflicting with secure login sessions used by some websites. Options have been reworked with a refresh to its look including the use of the Google Material Icons . Introduced a new, charcoal coloured icon that should clash less with most browser themes. Context menu now allows you to control the page transcoding, currently CP-487, CP-865, ISO-8959-15, CP-1252 character sets are supported. The about encoding content menu has been removed and replaced by the Transcode None option, that works with UTF-8, UTF-16 and ISO-8959-1 text. Automatic detect & run RetroTxt on text files feature has been renamed to Apply RetroTxt to any text files hosted on these websites . Options, font samples now reset when the user's mouse leaves the font selection form. Display formatting control codes as DOS CP-437 glyphs has been renamed to DOS control glyphs . When checked DOS control glyphs will show a few ASCII control characters in the sample text. Refactored much of the JavaScript source to use ECMAScript 6 specific features. Improved handling of file:/// domains. Uses asynchronous XMLHttpRequest.open() functionality as browser support of synchronous requests may end. Context menus now use checkmarks for active options. Context menus code in eventpages.js has been redesigned so it is now easier to add new themes and Display options. The toolbar button should now be more intuitive by more accurately changing its enabled state and refreshing its tip where appropriate. Firefox specific fixes Requires Firefox 50+. Options dialogue is better themed to Firefox's style guides. (Unfortunately Firefox on Linux still has some strange input style quirks) Fixed Options not supporting UK locales. Fixed first time run bugs that required RetroTxt to reload for it to work correctly. Fixed RetroTxt trying to run on about: URIs. RetroTxt should be slightly less resource intensive as previously there were some event filters that Firefox was ignoring. 1.25 2 July 2016 Automatic detect & run RetroTxt on text files feature is now more reliable and intuitive . Its (experimental) tag has been dropped and can now be considered stable. Automatic detect & run RetroTxt... also has a hardcoded blacklist of domains to ignore which previously this feature conflicted with. Added QUnit testing. A Tests link to the results page will show up with Chrome in Options when using a development install. Fixed vertical lines artefacts issue with block fonts with most colour combinations. Firefox specific bugs fixed including incorrect normal line height and weird toolbar button behaviour. Refactored a number of function names to be more descriptive of their purpose. Started the transition of replacing var with let and const . Some functions now return more meaningful errors when missing required parameters. 1.2 22 June 2016 Now works in Firefox but requires at least Firefox (Gecko) 48. Tested in Opera (Blink) and works great. Differences between using Firefox and Chrome Chrome uses event pages while Firefox uses the less desirable persistent background pages. Event pages only load when needed so in theory they should be less resource intensive. Firefox and the Gecko engine renders multiple block characters better than the Blink engine used in Chrome. The Blink engine adds light but distracting vertical lines. Firefox's Options UI does not support the unified chrome_style . The toolbar button in Firefox does not support right-click context menus. Context menus in Firefox are not filtered by URL types as it doesn't support the documentUrlPatterns property. When loading RetroTxt both Chrome and Firefox will throw warnings about unrecognised items in the manifest. 1.1 21 June 2016 Added ability to increase the whitespace between rows of text (line space) . Rearranged the Options menu to be more compact . Changed the sample text found in the Options menu. Removed the Options, font selection mouse out event to make the font samples more stable. Added IBM BIOS font (only 2y and 2x were previously included). Created this file.","title":"Changes"},{"location":"changes/#retrotxt-changes","text":"","title":"RetroTxt Changes"},{"location":"changes/#42","text":"","title":"4.2"},{"location":"changes/#october-2021","text":"Squared 1:1, 8x8 pixel PC fonts now use their -2y variants when available. The 2y variants are 16x16 in size, meaning they're easier to read and look better. 11 new color themes for the Options tab under Settings. Replaced deprecated API function, extension.getURL() . Fixed broken elements in options.html .","title":"October 2021"},{"location":"changes/#41","text":"","title":"4.1"},{"location":"changes/#june-2021","text":"Updated PC and MS-DOS fonts to Ultimate Oldschool PC Font Pack v2.2. Support for custom ports in URLs such as http://localhost:8080 or https://example.com:9999 . Replaced all the woff fonts with woff2 fonts to offer better file compression. This reduces the overall file size of RetroTxt and system resource usage. The Options Fonts tab Jump to menu now always remains on the tab. Reduced page flicker when switching Options tabs. Fixed broken Apple Lisa fonts. Fixed the local file viewer toggling on non-text file tabs when the file's extension is in uppercase. Fixed certain fonts that use spaces within their names, breaking the loading text files. Fixed broken SAUCE IBM VGA50 font. Improved support and display of multiline SAUCE comments. Improve the positioning of the error alert box. Spelling and typo fixes for both UK and US English. Using Task for the build process. Dropped the use of the convoluted Node.createTextNode() and Node.appendChild() methods.","title":"June 2021"},{"location":"changes/#40","text":"","title":"4.0"},{"location":"changes/#highlights","text":"Complete Options redesign, it loads in a tab and is identical across all browsers. Welcome tab features is merged into the Options tab. Refreshed the information header. 200+ PC/MS-DOS system fonts. Numerous new fonts for home computers. Improved the font representation for SAUCE fontname matching. Dropped the context menu functionality and replaced it with Option tab links. Omnibox support, type rt space in the browser address bar to see the list of commands.","title":"Highlights"},{"location":"changes/#october-2020","text":"The font choice save is reset. Minimum Chrome requirement v72, minimum Firefox requirement v69. Improved compatibility with Amiga ANSI. Added Unscii fonts fantasy and MCR. Added PR Number 3 (Apple II). Added Apple IIGS Shaston system fonts. Added Apple GEOS Berkelium fonts. Added Pet Me Commodore 64 fonts. Added Tandy TRS-80 and CoCo fonts. Added IBM 3270 font. Added new Workbench ANSI theme. Updated Print Char 21 font (Apple II). Updated Unscii fonts to v2.0. Updated Plex Mono fonts plus new weights. Changed references to web-extension, web extension, WebExtension to Extension, with a capital E. Moved documentation from the barebones Wiki into /docs and https://docs.retrotxt.com. Options in Chrome uses a dedicated browser tab. Options in Chrome implements Bulma as a CSS framework for a larger and improved layout. Added content-visibility CSS attribute for Chrome 85+ to help improve large screen rendering, see issue #91 . Added showBrowser(), links to the Edge Add-ons page, issue #78 . Replaced all Material Design Icon fonts with individual SVG images. This improves icon resize scalability and user accessibility, see issue #92 . Fixed eventpage.js invoke() , checks the lastError value, this also fixes issue #93 . Fixed the broken toolbar icon swap when Chrome detects a system dark mode theme. Updated dev dependencies and libraries. Moved the programming code and assets of the Extension into /ext . Removed Windows PowerShell source code support, instead Windows users can use WSL. Removed 'API permissions granted' from the Options as it duplicates included browser features. Renamed Storage class to LocalStore to avoid browser API conflicts. Context menus code were difficult to maintain and inconsistent between browsers. Unified pages to use LF instead of CRLF. Added support for ECMA48 SGR20 Fraktur font.","title":"October 2020"},{"location":"changes/#35","text":"","title":"3.5"},{"location":"changes/#march-2020","text":"Added Spleen font support. Added Microsoft Edge browser support. Added Microsoft Edge Addons links. Improved compatibility with Blocktronics Blocky Horror & dsotb packs. Added labels to for() loops. Added hidepassed argument to QUnit test links. Added Chrome and Edge browser version info to welcome.html. isNum() now intentionally points to either to the Number function. Fixed stylesheets not being loaded for BBS coloured text formats. Fixed broken DOM() class unit test. Fixed New width byte sequence 80 console message. Fixed colorpalette() causing errors with non-ANSI art. Fixed missing Unscii credit on the Firefox Options About tab. Fixed 'Font family used for display' title mislabelling some fonts. Reduced the width of the Options menu buttons to better fit with Edge.","title":"March 2020"},{"location":"changes/#342","text":"","title":"3.4.2"},{"location":"changes/#october-2019","text":"Created an ANSI tab in the options. Created Default color palette selection option. Added links in the welcome page for extension-app store reviews. Replaced Download API console warnings on startup with logs.","title":"October 2019"},{"location":"changes/#34","text":"","title":"3.4"},{"location":"changes/#august-2019","text":"Improved compatibility with wide, 80+ column ANSI art. Improved compatibility with narrow, -80 column ANSI art. Much improved compatibility with late 1990s, 80 column ANSI art. Added new Display Option \"Smear block characters\" that applies CSS text-shadowing specifically on CP-437 block characters to reduce line artefacts on Windows operating systems. Added Celerity BBS | color codes support. Added Renegade BBS | color codes support. Added Telegard BBS ` color codes support. Added WVIV BBS |# pipe code support. Added WVIV BBS \u2665 heart code support. Added Apple IIgs and Commodore 64 palettes for 4-bit ANSI. Blinking text now works properly on non-black backgrounds. Change minimum Chromium version to 58. Simplified some of the JS source code. Horizontal tab C0 codes in ANSI art now always display the \u25cb character when DOS control glyphs is enabled. Test case blocktronics_block_n_roll/die-already.ans Improved the accuracy of parsing of iCE color ANSIflags. Changed the ANSI slow blink timing (SGR5) to 500ms and fast blink (SGR6) to 300ms. Default CSS line-height value switched from 100% to normal for better compatibility with alt-fonts. Consolidated iCE Colors and VGA CSS classes to reduce duplication. Fixed issue 71 with the incorrect colour rendering of some RGB values. Fixed ultrawide ANSI art wrapping to the browser tab instead of overflowing with scrollbars. Fixed critical issue where a corrupt SAUCE font value breaks the ANSI render. Test case blocktronics_block_n_roll/nu-ninja_cat.ans Fixed welcome page not displaying Configure RetroTxt and Permissions Request example images. Fixed @CLS@ , it now does not automatically assume a PCBoard @-code file. Fixed > < and & characters breaking the end-of-line character count in ANSI text. Fixed RetroTxt unintentionally triggering when the browser plays audio/video media using file:/// URLs. Fixed Firefox Options sample text displaying a white shadow effect in Normal render mode . Renamed /docs/ directory to /md/ , most of the documentation is now located at the Wiki . Replaced non-working textmod.es/crew links with 16colo.rs/tags/group . Removed the Smeared text render toggle as it has been replaced with the Smear block characters setting. Removed the Focus mode as the technical debt to maintain was too high. Removed theme and display adjustments from the context menus to simplify the code.","title":"August 2019"},{"location":"changes/#33","text":"","title":"3.3"},{"location":"changes/#june-2019","text":"Added a Focus mode toggle. Added Unscii 8 and Unscii 16 font support. Added Line wrap toggle to the information header when displaying ANSI/ECMA-48 text. Added preferred dark mode support for Chrome/Chromium 67+ browsers. Significantly reduced the tab memory usage after rendering ANSI/ECMA-48 text. Dropped the use of null in all large, internal arrays which should slightly improve performance with the JavaScript V8 engine. Significantly reduced the console spam when undetected ANSI control sequences are found. Refactored scripts\\parse_ansi.sys to use ES5 Class expressions so the source code easier to follow. Added support for the following ECMA-48 controls. CHT Cursor Forward Tabulation, it acts as 4 forward space movements. Changed the horizontal behaviour of the ECMA-48 HVP command, it will now wrap to the maximum columns limit and then continue on the new row. Greatly expanded the unit test coverage of parse_ansi.js. Fixed, duplicate downloads are triggering with some binary file types such as woff fonts. Fixed, Save link as accidentally creating a new, empty file:/// tab. Fixed ECMA-48 CUD bug where there were too many rows created. An error is now displayed when trying to load a file:/// with no content.","title":"June 2019"},{"location":"changes/#32","text":"","title":"3.2"},{"location":"changes/#february-2019","text":"Added IBM AIX terminal bright and bold colour support. Improved Allow access to file URLs is disabled notification to be more prominent. Added npm run scripts to the package.json. npm run build npm run firefox npm run lint npm run version Fixed Downloads.listen() causing an endless download loop (issue #56). Fixed hideEntities() not catching <> character combinations that broke ANSI rendering (issue #58). Fixed the Options Apply RetroTxt to any local text files file:/// link pointing to the C: drive on Linux and macOS.","title":"February 2019"},{"location":"changes/#31","text":"","title":"3.1"},{"location":"changes/#december-2018","text":"Re-added the ability to make additions to the Apply RetroTxt to text files hosted on these websites list that was disabled in v3.0. Fixed the Zeus II logo for the welcome screen breaking on Linux. Fixed Homepage URL in the Firefox addon tab. Fixed incorrect links in README.md .","title":"December 2018"},{"location":"changes/#30","text":"","title":"3.0"},{"location":"changes/#highlights_1","text":"User interface improvements and bug fixes. Much improved legacy code page detection and support. New progressive permissions for enhanced security. New redesign of the Options menu. New ASCII text theme for your own custom background/foreground colours.","title":"Highlights"},{"location":"changes/#november-2018","text":"Rewrote the Code Page 437 normaliser, the character conversions are more accurate. RetroTxt gracefully recovers after the unintentional deletion of storage items. RetroTxt out of the box is locked down with gradual permission privileges requests when features are enabled. Previously RetroTxt always had access to downloads, http/ftp tabs, etc. regardless of whether they were needed or not. However, these are moving to optional_permissions which grant access on an associated Option. Broad http://*/ and https://*/ read permissions are gone in favour of domain-specific access such as https://retrotxt.com/* and http://retrotxt.com/* . RetroTxt never read more than the first two characters of any HTML tab that is active, but it was not a good look for new users seeing Read and change all your data on the websites that you visit in the add-ons menu. Redesigned the Options menu to better match the new user interface introduced in Chrome v69. This required the disabling of the chrome_style manifest UI option which hasn't been updated since early 2016. Added a privacy policy with API permission requirements. Added Option to use a customised colour set for the text foreground and background. Added IBM's 2017 Plex Mono font . Added Macintosh-Roman, ISO8859-10 code page support. Mouse hovering on the information header font name reveals more descriptive font information. Added Option to toggle blinking text and cursor animations. Added a textmod.es/crew link to SAUCE header data for some ANSI groups when their group data are matches in the SAUCE metadata. Added new icons for Firefox dark themes. Firefox uses SVG icons. Center align text now previews in the sample text. RetroTxt browser toolbar button now behaves differently to avoid occasional false positives. Instead of disabling itself when an invalid page is detected, the button now shows a \u2714 checkmark whenever a compatible tab is active. The compatibility results vary based on the Extension permissions grants. Fixed PCBoard & Wildcat BBS colour inaccuracies in the CSS. Remapped CGA palettes so black is less frequent. Text that lack line breaks now wrap to the browser tab. CSS variables are more frequently in use. Added install type detection that enables a verbose mode when the type is development . Source code uses Prettier for opinionated formatting. Refactored most of the JS to use ES5 Class expressions so the source code easier to follow. It is still a TODO item for parse_ansi.js . Using separate manifest.json and options.html for Firefox and Chrome. The Chrome Extension API hasn't been updated since early 2016 and is now the legacy implementation. Saves the Options last active tab. Expanded the number of unit tests to cover more of the application. Fixed incorrect keyboard keys displayed on alerts with macOS. Fixed Options icons links with underlined artefacts in Chrome. Fixed Options now gracefully handle the removal of localStorage items. Fixed broken Options links when in development install type.","title":"November 2018"},{"location":"changes/#known-issues","text":"Currently, you cannot make additions to the Apply RetroTxt to text files hosted on these websites list. The problem is due to new permissions API implementation that requires all sites to be listed in the manifest.json . On Firefox 63 the Options fonts menu sprawls across the screen, this is fixed in version 64. On Firefox Linux the Zeus II logo for the welcome screen is broken. For some distributions with Firefox on Linux the select menus have extra large, unreadable fonts.","title":"Known issues"},{"location":"changes/#25","text":"","title":"2.5"},{"location":"changes/#march-2018","text":"Added Shift JIS support that will toggle the use of the Mona font when encountered. Added an ANSI 80 column wrap checkbox option that lets you disable this feature. Added 2-bit IBM CGA palette 0 (brown/yellow). Welcome.html has been reworked and uses tooltips on links. Improved CSS font-stack for system fonts that should look better on all operating systems. Context menu now uses radio buttons instead of tick glyphs. Console output is now grouped and collapsed by default to reduce message spam. Improved rendering of PCBoard art with alternative fonts. Regenerated internal fonts to the woff2 format to reduce the download and install size of the Extension. Fixed context menu issues. Fixed unsupported ECMA-48 controls reported as unknown. Fixed blinking cursor not positioning correctly on small ANSI documents. Fixed text render methods not applied to ANSI documents. Fixed white background themes that were not showing ECMA-48 bold text due to foreground and backgrounds colours being the same.","title":"March 2018"},{"location":"changes/#24","text":"","title":"2.4"},{"location":"changes/#september-2017","text":"Added Linux and IBM PS/2 context menu themes. Added Browser monospace font (called fixed-width in Chrome). ASCII documents now obey SAUCE fontName value. Redesigned some of the context menus. Added a \u25b2 hide \u25bc show toggle for the header. Added 1x and 2x font size adjust toggle in the header. Welcome page displays a RetroTxt updated banner that can also be turned off. Requires Firefox 55. Links in the header are not selectable to stop accidental selection when clicked. Replaced columns/lines statistics in the header with total pixel width/length. Fixed Blink engine handling of ANSI when it mistakenly sees it as ISO-8859-5 instead of Windows-1252. Fixed broken preview images in welcome.html . Fixed SAUCE font issue where it requests Amiga Plus fonts but uses standard. Fixed Some wider fonts break the ASCII text document layout . Fixed SAUCE font P0T-NOoDLE value not registering. ANSI maximum columns are now uncapped when SAUCE TInfo1 data is corrupted by the browser. Internal optimisations. Replaced XMLHttpRequest() with FetchAPI . Dropped the generation of elements using dom.innerHTML = text (except in parse_ansi.js ). Removed all remaining var usage. Replaced many let variables with const objects. Renamed some variables, so they are clearer in their purpose. Removed some unused functions and objects.","title":"September 2017"},{"location":"changes/#23","text":"","title":"2.3"},{"location":"changes/#august-2017","text":"Added 24-bit RGB colour support for ANSI/ECMA-48 text. That gives a choice of over 16 million colours to play with. New fonts, a complete set of Amiga and ATASCII (Atari 8-bit). Complete SAUCE FontName support. Added 2-bit IBM CGA magenta palette. Added Option checkbox, 'ANSI iCE colors'. Fixed some CP437 characters not displaying as intended. Fixed issue where 'DOS control glyphs' changes required two tab refreshes to apply. Any discovered SAUCE configurations are sent to the browser console. Browser tab titles running RetroTxt are marked with [\u00b7\u00b7] .","title":"August 2017"},{"location":"changes/#22","text":"","title":"2.2"},{"location":"changes/#june-2017","text":"There are new clickable toggles in the information header for ANSI art. Normal switches the active tab text rendering between Normal , Smeared and Shadowed . IBM switches the ANSI 16 color palette between IBM VGA, Unix xterm and gray scale. On toggles between iCE background colors and blinking text. Added a new Option, Text render , choices are Normal , Smeared , Shadowed . Increased minimum version requirements for both Chrome and Firefox to 51. Added support for CP-1250 and CP-1251 text encodings that are occasionally used by Chrome over the expected CP-1252. Fixed header not displaying when using white background themes. To improve performance <links> to CSS files are disabled instead of removed when toggling between plain text and HTML displays. The shortcut key combination has been switched from ALT+T to ALT+R to stop Firefox conflicts. Fixed ECMA48 SGR2 and SGR3 controls using the wrong CSS properties.","title":"June 2017"},{"location":"changes/#21","text":"","title":"2.1"},{"location":"changes/#march-2017","text":"Performance optimisations to reduce the memory footprint and improve rendering speed. ECMA48/ANSI iCE colors support. Automatic parsing and execution of SAUCE ANSiFlags . Added Atari ST TOS font and theme. Text and font information header now conveys more information and uses CSS position: sticky; . JavaScript refactor to be ESlint compliant . Uses more ES6 features such as arrow functions and for-of loops. Improved error handling and user feedback when the addon or Extension API fails. Improved embedded SAUCE detection . Fixed ECMA48/ANSI bug that dropped the first row of text. Fixed mixed ANSI/ASCII documents issue that didn't parse the ECMA48 control characters. Fixed < > and & characters breaking ANSI display thanks to browser HTML entity conversions. Fixed @CLS@ bug in PCBoard detection. Fixed HVP and CUP execution.","title":"March 2017"},{"location":"changes/#20","text":"","title":"2.0"},{"location":"changes/#november-2016","text":"Detects and converts many ANSI Control Sequence Introduces used by MS-DOS ANSI.SYS to display ANSI art. Detects and converts legacy BBS colour codes for PCBoard and Wildcat! . Apply RetroTxt to any text files hosted on these websites will only run on a user supplied whitelist of website domains. This will stop it from conflicting with secure login sessions used by some websites. Options have been reworked with a refresh to its look including the use of the Google Material Icons . Introduced a new, charcoal coloured icon that should clash less with most browser themes. Context menu now allows you to control the page transcoding, currently CP-487, CP-865, ISO-8959-15, CP-1252 character sets are supported. The about encoding content menu has been removed and replaced by the Transcode None option, that works with UTF-8, UTF-16 and ISO-8959-1 text. Automatic detect & run RetroTxt on text files feature has been renamed to Apply RetroTxt to any text files hosted on these websites . Options, font samples now reset when the user's mouse leaves the font selection form. Display formatting control codes as DOS CP-437 glyphs has been renamed to DOS control glyphs . When checked DOS control glyphs will show a few ASCII control characters in the sample text. Refactored much of the JavaScript source to use ECMAScript 6 specific features. Improved handling of file:/// domains. Uses asynchronous XMLHttpRequest.open() functionality as browser support of synchronous requests may end. Context menus now use checkmarks for active options. Context menus code in eventpages.js has been redesigned so it is now easier to add new themes and Display options. The toolbar button should now be more intuitive by more accurately changing its enabled state and refreshing its tip where appropriate.","title":"November 2016"},{"location":"changes/#firefox-specific-fixes","text":"Requires Firefox 50+. Options dialogue is better themed to Firefox's style guides. (Unfortunately Firefox on Linux still has some strange input style quirks) Fixed Options not supporting UK locales. Fixed first time run bugs that required RetroTxt to reload for it to work correctly. Fixed RetroTxt trying to run on about: URIs. RetroTxt should be slightly less resource intensive as previously there were some event filters that Firefox was ignoring.","title":"Firefox specific fixes"},{"location":"changes/#125","text":"","title":"1.25"},{"location":"changes/#2-july-2016","text":"Automatic detect & run RetroTxt on text files feature is now more reliable and intuitive . Its (experimental) tag has been dropped and can now be considered stable. Automatic detect & run RetroTxt... also has a hardcoded blacklist of domains to ignore which previously this feature conflicted with. Added QUnit testing. A Tests link to the results page will show up with Chrome in Options when using a development install. Fixed vertical lines artefacts issue with block fonts with most colour combinations. Firefox specific bugs fixed including incorrect normal line height and weird toolbar button behaviour. Refactored a number of function names to be more descriptive of their purpose. Started the transition of replacing var with let and const . Some functions now return more meaningful errors when missing required parameters.","title":"2 July 2016"},{"location":"changes/#12","text":"","title":"1.2"},{"location":"changes/#22-june-2016","text":"Now works in Firefox but requires at least Firefox (Gecko) 48. Tested in Opera (Blink) and works great.","title":"22 June 2016"},{"location":"changes/#differences-between-using-firefox-and-chrome","text":"Chrome uses event pages while Firefox uses the less desirable persistent background pages. Event pages only load when needed so in theory they should be less resource intensive. Firefox and the Gecko engine renders multiple block characters better than the Blink engine used in Chrome. The Blink engine adds light but distracting vertical lines. Firefox's Options UI does not support the unified chrome_style . The toolbar button in Firefox does not support right-click context menus. Context menus in Firefox are not filtered by URL types as it doesn't support the documentUrlPatterns property. When loading RetroTxt both Chrome and Firefox will throw warnings about unrecognised items in the manifest.","title":"Differences between using Firefox and Chrome"},{"location":"changes/#11","text":"","title":"1.1"},{"location":"changes/#21-june-2016","text":"Added ability to increase the whitespace between rows of text (line space) . Rearranged the Options menu to be more compact . Changed the sample text found in the Options menu. Removed the Options, font selection mouse out event to make the font samples more stable. Added IBM BIOS font (only 2y and 2x were previously included). Created this file.","title":"21 June 2016"},{"location":"encoding/","text":"Encoding fonts Online conversion font squirrel transfonter Online metadata font drop Offline conversion transtype Woff2 batch conversion woff2","title":"Encoding fonts"},{"location":"encoding/#encoding-fonts","text":"","title":"Encoding fonts"},{"location":"encoding/#online-conversion","text":"font squirrel transfonter","title":"Online conversion"},{"location":"encoding/#online-metadata","text":"font drop","title":"Online metadata"},{"location":"encoding/#offline-conversion","text":"transtype","title":"Offline conversion"},{"location":"encoding/#woff2-batch-conversion","text":"woff2","title":"Woff2 batch conversion"},{"location":"limitations/","text":"Limitations and known issues These are known unfixable problems due to restrictions with the browser or operating system. Preferred operating system and browser? To reduce excessive CPU usage and battery drains, Chrome artificially limits the processing resources available to Extensions. So it can be slower than Firefox to render large ANSI documents or text that use RGB color controls. macOS Linux and ChromeOS Windows Apple's macOS is the best platform to use RetroTxt. Regardless of the browser, it displays shaded characters and blocks with no artifacts or distortion. For crisper text, make sure the Retina Display Scale is exactly half your screen resolution. For example, if a Macbook Pro 13.3\" has a 2560 x 1600 resolution, you'd want the Built-in Retina Display to scale to 1280 x 800. Because of the high resolutions with many modern Apple products, you can also disable Use font smoothing when available. Desktop Linux complicates things due to the number of varying components used by different distributions. Firefox (at least on GNOME with Wayland), there are no artifacts, so it is the preferred browser on Linux. Chrome and ChromeOS uses its internal font rendering, which suffers from the same artifacts as Chrome on Windows. Regardless of the browser, Windows suffers from artifacts and distortions caused by its system wide font hinting. BBS era ANSI A lot of Bulletin Board System era ANSI art relied on an 80x25 fixed terminal with the cursor positioning to create motion and animations that do not convert using RetroTxt. Fixing this would require a considerable amount of programming work for little reward. It would be a massive hit to browser performance, and most larger and complicated ANSI would probably never render as the browser would flag the tab as unresponsive. MIME sniffing Browser MIME sniffing will often override RetroTxt, forcing text files to download rather than display in a tab. Firefox will usually produce incorrect MIME sniffing results with the http(s):// protocol. Chromium-based browsers can produce incorrect MIME sniffing results with the file:/// protocol. Unsupported text formats Non-standard home computer ASCII such as Atari ATASCII and Commodore PETSCII texts, are not supported. Binary formats such as .xbin and .bin are not supported as browsers refuse to render unknown file data on a page. Missing or invalid characters The following five characters, when used by text encoded in CP-437 , will not display correctly in a web browser. \u00fc \u00ec \u00c5 \u00c9 \u00a5 One of the many issues with legacy 8-bit character encodings is that not all code pages use every available character. So while the original IBM CP-437 used by many ANSI art pieces has a full set of 256 characters, the browser-friendly Windows CP-1252 offers 251 characters. For example, f\u00fcnf German for five is a legitimate word in CP-437 (OEM-US) but breaks in Windows CP-1252. f\u00fcnf viewed as CP-437 f\u00fcnf viewed as Windows-1252 Fonts and styling accuracy The extension uses TrueType fonts, which are affected by the operating system font hinting; ClearType on Windows, Quartz in macOS, and FreeType on Linux. Oliver Schmidhauser has a useful summary of the issue . Some fonts are for 40 column screens (characters per line of text), but the extension doesn't enforce that limitation. The browser and the operating system can modify the font width, height, and space for either accessibility or due to user applied themes.","title":"Limitations"},{"location":"limitations/#limitations-and-known-issues","text":"These are known unfixable problems due to restrictions with the browser or operating system.","title":"Limitations and known issues"},{"location":"limitations/#preferred-operating-system-and-browser","text":"To reduce excessive CPU usage and battery drains, Chrome artificially limits the processing resources available to Extensions. So it can be slower than Firefox to render large ANSI documents or text that use RGB color controls. macOS Linux and ChromeOS Windows Apple's macOS is the best platform to use RetroTxt. Regardless of the browser, it displays shaded characters and blocks with no artifacts or distortion. For crisper text, make sure the Retina Display Scale is exactly half your screen resolution. For example, if a Macbook Pro 13.3\" has a 2560 x 1600 resolution, you'd want the Built-in Retina Display to scale to 1280 x 800. Because of the high resolutions with many modern Apple products, you can also disable Use font smoothing when available. Desktop Linux complicates things due to the number of varying components used by different distributions. Firefox (at least on GNOME with Wayland), there are no artifacts, so it is the preferred browser on Linux. Chrome and ChromeOS uses its internal font rendering, which suffers from the same artifacts as Chrome on Windows. Regardless of the browser, Windows suffers from artifacts and distortions caused by its system wide font hinting.","title":"Preferred operating system and browser?"},{"location":"limitations/#bbs-era-ansi","text":"A lot of Bulletin Board System era ANSI art relied on an 80x25 fixed terminal with the cursor positioning to create motion and animations that do not convert using RetroTxt. Fixing this would require a considerable amount of programming work for little reward. It would be a massive hit to browser performance, and most larger and complicated ANSI would probably never render as the browser would flag the tab as unresponsive.","title":"BBS era ANSI"},{"location":"limitations/#mime-sniffing","text":"Browser MIME sniffing will often override RetroTxt, forcing text files to download rather than display in a tab. Firefox will usually produce incorrect MIME sniffing results with the http(s):// protocol. Chromium-based browsers can produce incorrect MIME sniffing results with the file:/// protocol.","title":"MIME sniffing"},{"location":"limitations/#unsupported-text-formats","text":"Non-standard home computer ASCII such as Atari ATASCII and Commodore PETSCII texts, are not supported. Binary formats such as .xbin and .bin are not supported as browsers refuse to render unknown file data on a page.","title":"Unsupported text formats"},{"location":"limitations/#missing-or-invalid-characters","text":"The following five characters, when used by text encoded in CP-437 , will not display correctly in a web browser. \u00fc \u00ec \u00c5 \u00c9 \u00a5 One of the many issues with legacy 8-bit character encodings is that not all code pages use every available character. So while the original IBM CP-437 used by many ANSI art pieces has a full set of 256 characters, the browser-friendly Windows CP-1252 offers 251 characters. For example, f\u00fcnf German for five is a legitimate word in CP-437 (OEM-US) but breaks in Windows CP-1252. f\u00fcnf viewed as CP-437 f\u00fcnf viewed as Windows-1252","title":"Missing or invalid characters"},{"location":"limitations/#fonts-and-styling-accuracy","text":"The extension uses TrueType fonts, which are affected by the operating system font hinting; ClearType on Windows, Quartz in macOS, and FreeType on Linux. Oliver Schmidhauser has a useful summary of the issue . Some fonts are for 40 column screens (characters per line of text), but the extension doesn't enforce that limitation. The browser and the operating system can modify the font width, height, and space for either accessibility or due to user applied themes.","title":"Fonts and styling accuracy"},{"location":"menus/","text":"The context menu can be found by right-clicking on the active tab (web page) content and in Chrome by right-clicking the RetroTxt toolbar button. Context menu Transcode this text Character encoding is complicated, and the execution not always precise. If you encounter a page that is not displaying as expected, you can transcode the text to show a different set of characters. Transcode text selections only apply to the active browser tab. Here is a text document with the correct character encoding Here is the same document with the incorrect transcoding Automatic The default behavior , this lets RetroTxt try to determine the base character encoding of the text and, when needed, apply any transcoding. UTF-8 is the most common, contemporary code set to encoded Unicode text (including Emojis), and it is nearly always in use with HTML5. ISO-8859-1 was the original code set used by Linux, the Commodore Amiga, and online during the 1990s. It is near identical to ISO-8859-15 but lacks a few European-centric characters such as the \u20ac sign. CP-1252 Force the active tab to parse the source text using CP-1252 encoding. ISO 8859-15 Force the active tab to display the text using ISO-8859-15 , the recommended encoding for Linux and the web in the 2000s. US-ASCII Force the active tab not to transcode and can help to make documents encoded in UTF-8 or ISO-8859-1 to display. CP-1252 \u21bb Force the active tab to display the text using CP-1252 , a familiar legacy Microsoft Windows encoding instead of the default MS-DOS CP-437 . ISO 8859-5 \u21bb Force the active tab to parse the source text using ISO 8895-5 encoding.","title":"Context menus"},{"location":"menus/#transcode-this-text","text":"Character encoding is complicated, and the execution not always precise. If you encounter a page that is not displaying as expected, you can transcode the text to show a different set of characters. Transcode text selections only apply to the active browser tab. Here is a text document with the correct character encoding Here is the same document with the incorrect transcoding","title":"Transcode this text"},{"location":"menus/#automatic","text":"The default behavior , this lets RetroTxt try to determine the base character encoding of the text and, when needed, apply any transcoding. UTF-8 is the most common, contemporary code set to encoded Unicode text (including Emojis), and it is nearly always in use with HTML5. ISO-8859-1 was the original code set used by Linux, the Commodore Amiga, and online during the 1990s. It is near identical to ISO-8859-15 but lacks a few European-centric characters such as the \u20ac sign.","title":"Automatic"},{"location":"menus/#cp-1252","text":"Force the active tab to parse the source text using CP-1252 encoding.","title":"CP-1252"},{"location":"menus/#iso-8859-15","text":"Force the active tab to display the text using ISO-8859-15 , the recommended encoding for Linux and the web in the 2000s.","title":"ISO 8859-15"},{"location":"menus/#us-ascii","text":"Force the active tab not to transcode and can help to make documents encoded in UTF-8 or ISO-8859-1 to display.","title":"US-ASCII"},{"location":"menus/#cp-1252_1","text":"Force the active tab to display the text using CP-1252 , a familiar legacy Microsoft Windows encoding instead of the default MS-DOS CP-437 .","title":"CP-1252 \u21bb"},{"location":"menus/#iso-8859-5","text":"Force the active tab to parse the source text using ISO 8895-5 encoding.","title":"ISO 8859-5 \u21bb"},{"location":"nginx/","text":"Configure Nginx to serve ANSI, ASCII & BBS art A barebones configuration to serve plain text files using Nginx . server { listen 80 ; root /var/www/example.com/html ; location /ansi { charset \"ISO-8859-1\" ; add_header Content-Disposition \"inline\" ; add_header X-Content-Type-Options \"nosniff\" ; types { text/plain asc ans txt ; } } } Explanation The location block applies the configuration only to files using the path http://example.com/ansi. While the types block further filters files utilising an asc ans or txt file extension. charset \"ISO-8859-1\" directive combined with the types { text/plain } block will add a Content-Type:text/plain; charset=ISO-8859-1 response header. It tells the browser to treat the file as plain text encoded as ISO-8859-1 , which is a legacy character set RetroTxt can understand. You cannot use CP-437 or other DOS code pages as they are not valid browser encodings . add_header Content-Disposition \"inline\"; directive adds a Content-Disposition:inline response header that tells the browser to display the content in a tab. add_header X-Content-Type-Options \"nosniff\"; directive adds the X-Content-Type-Options:nosniff response header to tell browsers not to MIME sniff the content. MIME sniffing often inaccurately treats ANSI and other encoded text as binary files which browsers download. Unfortunately, Firefox ignores this header request . Response headers in Chrome","title":"Nginx"},{"location":"nginx/#configure-nginx-to-serve-ansi-ascii-bbs-art","text":"","title":"Configure Nginx to serve ANSI, ASCII &amp; BBS art"},{"location":"nginx/#a-barebones-configuration-to-serve-plain-text-files-using-nginx","text":"server { listen 80 ; root /var/www/example.com/html ; location /ansi { charset \"ISO-8859-1\" ; add_header Content-Disposition \"inline\" ; add_header X-Content-Type-Options \"nosniff\" ; types { text/plain asc ans txt ; } } }","title":"A barebones configuration to serve plain text files using Nginx."},{"location":"nginx/#explanation","text":"The location block applies the configuration only to files using the path http://example.com/ansi. While the types block further filters files utilising an asc ans or txt file extension. charset \"ISO-8859-1\" directive combined with the types { text/plain } block will add a Content-Type:text/plain; charset=ISO-8859-1 response header. It tells the browser to treat the file as plain text encoded as ISO-8859-1 , which is a legacy character set RetroTxt can understand. You cannot use CP-437 or other DOS code pages as they are not valid browser encodings . add_header Content-Disposition \"inline\"; directive adds a Content-Disposition:inline response header that tells the browser to display the content in a tab. add_header X-Content-Type-Options \"nosniff\"; directive adds the X-Content-Type-Options:nosniff response header to tell browsers not to MIME sniff the content. MIME sniffing often inaccurately treats ANSI and other encoded text as binary files which browsers download. Unfortunately, Firefox ignores this header request . Response headers in Chrome","title":"Explanation"},{"location":"options/","text":"RetroTxt - Options As of RetroTxt version 4, this document is redundant as all the relative information is in the Options tab.","title":"RetroTxt - Options"},{"location":"options/#retrotxt-options","text":"","title":"RetroTxt - Options"},{"location":"options/#as-of-retrotxt-version-4-this-document-is-redundant-as-all-the-relative-information-is-in-the-options-tab","text":"","title":"As of RetroTxt version 4, this document is redundant as all the relative information is in the Options tab."},{"location":"privacy/","text":"RetroTxt does not collect or transmit any data created by your web browser. All data generated by the Extension is only ever stored locally on your computer by using the browser local or session storage APIs. Technical The Extension manifest.json lists all the browser permissions RetroTxt requires for operation. permissions lists required permissions. optional_permissions lists optional permissions. RetroTxt gets these permissions automatically on installation. activeTab It is needed so RetroTxt can read the current URL of the active browser tab. The URL is used to determine: If the URL is known to the Run RetroTxt on files hosted on these domains list. If the URL matches *://retrotxt.com/* . If the file it is pointing to is a known text filename, it uses an extension such as .nfo or .txt . The read URLs are never saved or transmitted, and the code for their use can be found and reviewed in scripts\\eventpage.js under the _checkURL() , and compatibleURL() functions within the class Tab . contextMenus Grants RetroTxt access to the contextMenus API, and allows it to create menus on the browser page and RetroTxt toolbar icon. storage Grants RetroTxt access to the Storage API, and allows it to save and retrieve user Options configurations. *://retrotxt.com/* Grants RetroTxt access to parse the sample and test text files hosted on retrotxt.com. Optional permissions requests These permissions toggle when you enable specific RetroTxt Options. The browser will prompt you for a permissions request, and if you deny this, the feature will remain off. tabs It is needed so RetroTxt can read the URL of background browser tabs for the same purpose as the activeTab permission. downloads downloads.open Are needed by the Apply RetroTxt to any downloaded or local text files . RetroTxt ignores all downloads except those which match the following conditions. The file has a MIME type of either text/plain , text/x-nfo , text-unknown . The text file content does not begin with the characters <! or <? , usually HTML or scripts. The code can be found and reviewed in scripts\\eventpage.js under class Downloads . file:///*/ The Use RetroTxt as a local text file viewer option is needed, so RetroTxt can run on text files stored on the host computer hard drive. RetroTxt ignores all files except those which match the following conditions. The tab URI is not a directory. The filename contains one of these file extensions, asc , ascii , ans , ansi , diz , faq , nfo , pcb , text , txt . The code can be found and reviewed in scripts\\eventpage.js under the compatibleURL() function within the class Tab . *://*.examples.com/* The other domains listed in optional_permissions are for the Run RetroTxt on files hosted on these domains option, and they operate in the same way as the *://retrotxt.com/* permission.","title":"Privacy"},{"location":"privacy/#retrotxt-does-not-collect-or-transmit-any-data-created-by-your-web-browser","text":"All data generated by the Extension is only ever stored locally on your computer by using the browser local or session storage APIs.","title":"RetroTxt does not collect or transmit any data created by your web browser."},{"location":"privacy/#technical","text":"The Extension manifest.json lists all the browser permissions RetroTxt requires for operation. permissions lists required permissions. optional_permissions lists optional permissions.","title":"Technical"},{"location":"privacy/#retrotxt-gets-these-permissions-automatically-on-installation","text":"","title":"RetroTxt gets these permissions automatically on installation."},{"location":"privacy/#activetab","text":"It is needed so RetroTxt can read the current URL of the active browser tab. The URL is used to determine: If the URL is known to the Run RetroTxt on files hosted on these domains list. If the URL matches *://retrotxt.com/* . If the file it is pointing to is a known text filename, it uses an extension such as .nfo or .txt . The read URLs are never saved or transmitted, and the code for their use can be found and reviewed in scripts\\eventpage.js under the _checkURL() , and compatibleURL() functions within the class Tab .","title":"activeTab"},{"location":"privacy/#contextmenus","text":"Grants RetroTxt access to the contextMenus API, and allows it to create menus on the browser page and RetroTxt toolbar icon.","title":"contextMenus"},{"location":"privacy/#storage","text":"Grants RetroTxt access to the Storage API, and allows it to save and retrieve user Options configurations.","title":"storage"},{"location":"privacy/#retrotxtcom","text":"Grants RetroTxt access to parse the sample and test text files hosted on retrotxt.com.","title":"*://retrotxt.com/*"},{"location":"privacy/#optional-permissions-requests","text":"These permissions toggle when you enable specific RetroTxt Options. The browser will prompt you for a permissions request, and if you deny this, the feature will remain off.","title":"Optional permissions requests"},{"location":"privacy/#tabs","text":"It is needed so RetroTxt can read the URL of background browser tabs for the same purpose as the activeTab permission.","title":"tabs"},{"location":"privacy/#downloadsdownloadsopen","text":"Are needed by the Apply RetroTxt to any downloaded or local text files . RetroTxt ignores all downloads except those which match the following conditions. The file has a MIME type of either text/plain , text/x-nfo , text-unknown . The text file content does not begin with the characters <! or <? , usually HTML or scripts. The code can be found and reviewed in scripts\\eventpage.js under class Downloads .","title":"downloadsdownloads.open"},{"location":"privacy/#file","text":"The Use RetroTxt as a local text file viewer option is needed, so RetroTxt can run on text files stored on the host computer hard drive. RetroTxt ignores all files except those which match the following conditions. The tab URI is not a directory. The filename contains one of these file extensions, asc , ascii , ans , ansi , diz , faq , nfo , pcb , text , txt . The code can be found and reviewed in scripts\\eventpage.js under the compatibleURL() function within the class Tab .","title":"file:///*/"},{"location":"privacy/#examplescom","text":"The other domains listed in optional_permissions are for the Run RetroTxt on files hosted on these domains option, and they operate in the same way as the *://retrotxt.com/* permission.","title":"*://*.examples.com/*"},{"location":"source_code/","text":"RetroTxt employs an open sourced license with the complete source code available on GitHub . This page instructs on how to use the source in both Chromium based and Firefox web browsers. Visual Studio Code is used to create RetroTxt, and so it has some .vscode conveniences included in the package such as workspace settings and extension recommendations. There are also Node.js with yarn (or npm) dependencies for the programming and build tools. The source code is linted with ESLint and stylised using Prettier , an opinionated formatter. Download Download the RetroTxt source code onto your local computer. Run the following Git or gh command in a terminal. git gh git clone https://github.com/bengarrett/RetroTxt.git gh repo clone bengarrett/RetroTxt Install build dependencies with yarn Yarn package manager . cd RetroTxt yarn If the installation of the tools is successful, this command should return the web-ext version number. yarn run web-ext --version Convert and compact a Truetype font into WOFF2 for use by RetroTxt. wawoff2 tool . yarn run font mona.ttf mona.woff2 Windows Windows users may need to edit package.json \"scripts\" : { \"font\" : \"woff2_compress.js.cmd\" } Run RetroTxt in Firefox with automatic extension reloading. Web-ext command line tool to help build, run, and test WebExtensions. For this to work Firefox needs to be installed on your computer and then RetroTxt on Firefox will reload whenever a change is made to this source code. cp ext/json/manifest_firefox.json ext/manifest.json yarn run web-ext run -s = ext Analyse the source code for any errors using Mozilla's web-ext lint tool. cp ext/json/manifest_firefox.json ext/manifest.json yarn run web-ext lint -s = ext Use on Chrome, Edge, Brave and Chromium I suggest that you create a new user profile for use and to edit the Extension. Open a new tab and type in the address of the Extension. Chrome Edge Brave chrome://extensions edge://extensions brave://extensions In the Extensions tab, toggle Developer mode Click the Load unpacked button Navigate to the local directory containing the RetroTxt source code and select OK RetroTxt should load. The Options link behind the Details button and allows you to configure RetroTxt styling and behaviour. Chrome Edge Chrome Extensions developer mode Edge Extensions developer mode Use on Firefox Firefox is locked down and doesn't permit the loading of extensions outside of the Firefox Add-ons page. Mozilla's web-ext tool is the easiest method to bypass this with a dedicated web page but requires Node.js. Install Node.js if needed cd RetroTxt into the cloned RetroTxt directory Copy the Firefox manifest cp ext/json/manifest_firefox.json ext/manifest.json yarn to install web-ext and dependencies yarn run web-ext run -s=ext to load RetroTxt in Firefox with automatic extension reloading yarn run web-ext run -s = ext Applying config file: ./package.json Running web extension from /RetroTxt/ext Use --verbose or open Tools > Web Developer > Browser Console to see logging Installed /RetroTxt/ext as a temporary add-on The extension will reload if any source file changes Press R to reload (and Ctrl-C to quit) To restore the the Chrome manifest after you have quit Firefox. cp ext/json/manifest_chrome.json ext/manifest.json Use on Firefox Developer Edition Edit ext/.web-ext-firefox.js Update Original \"run\" : { \"firefox\" : \"firefox\" } Replacement \"run\" : { \"firefox\" : \"firefoxdeveloperedition\" } Follow the above Use on Firefox instructions Directory and file structure These are the directories and files that comprise of RetroTxt. .github/ Github repo settings. .vscode/ Workspace settings for Visual Studio Code . docs/ Documentation in Material for MkDocs markdown. fonts/ Original font packages with documentation and licences. .eslintrc.json ESLint configuration file . .gitattributes The Git settings file for this repository. .gitignore The Git file to exclude items from being checked into this repository. LICENSE A copy of the GNU Lesser General Public License , Version 3. package.json Yarn configuration file (npm compatible). ext/ The RetroTxt Extension root directory. ext/_locales/ Spelling differences for the UK and US English. ext/_locales/en_US/messages.json Also includes shared variables for remote URLs and BBS software names. ext/assets/snaps/ PNG screenshots used by the Options samples tab. ext/assets/svg/material-icons.svg SVG icons for the Options tab. ext/assets/ PNG icons for RetroTxt. ext/css/ Extension Cascading Style Sheets in CSS3 syntax. bulma.min.css Bulma CSS framework used by the Options tab. fonts_home.css Font faces and classes for the _Home computers_fonts. fonts_ibm.css Font faces and classes for the IBM PC & family fonts. fonts_modern.css Font faces and classes for the Modern fonts. layout.css Base elements styles. options.css Styles specific for the Options tab. retrotxt_loader.css An animated spinner to display during the RetroTxt processing. retrotxt.css Scanlines, text size, the Mona font face and cursor stylings. text_animation-off.css For the Blinking cursor and text off Option. text_colors_4bit-ice.css ANSI Select Graphic Rendition iCE Color classes. text_colors_4bit.css ANSI Select Graphic Rendition colour classes. text_colors_8bit.css Xterm 256 colours for ANSI colour classes. text_colors_bbs.css Shared BBS colours and font styles. text_colors_blink.css Simulate terminal blinking text. text_colors_c64.css Commodore 64 ANSI color pallete. text_colors_cga_0.css CGA 0 ANSI color pallete. text_colors_cga_1.css CGA 1 ANSI color pallete. text_colors_gray.css Monochrome ANSI color pallete. text_colors_iigs.css Apple IIGS ANSI color pallete. text_colors_pcboard.css PCBoard BBS colour classes. text_colors_pipe.css Renegade BBS and other BBS software colours. text_colors_vga.css VGA ANSI color pallete. text_colors_workbench.css Amiga Workbench ANSI color pallete. text_colors_wviv-pipe.css WVIV BBS and other BBS software colours. text_colors_xterm.css Xterm ANSI color pallete. text_colors.css Colours, text pair classes. text_ecma_48.css ANSI Select Graphic Rendition function classes. text_pagewrap.css For the ANSI Page wrap on option. ext/fonts/ Compressed fonts used in RetroTxt. ext/html/options.html HTML5 template for the Options page. ext/json/ JSON, human-readable data stores. manifest_chrome.json Extension manifest file for Chromium based browsers. manifest_firefox.json Extension manifest file for Firefox browsers. ext/scripts/ Extension JavaScripts in ES6+ (ES2015) syntax. eventpage.js Background functions and listeners that are completely isolated from all other scripts. functions.js Shared functions accessible to non-isolated scripts. options.js Isolated functions for the Options page located at ext/html/options.html . parse_ansi.js Functions to handle ANSI and ECMA-48 controls. parse_dos.js Functions to handle text encodings and DOS code pages. retrotxt.js Invokes RetroTxt, handles the browser page display and SAUCE metadata. ext/test/ Unit and sample test files. example_files/ ASCII and ANSI text test cases for use with the files:/// protocol. example_files/bbs_sheets/ BBS text test cases for use with the files:/// protocol. index.html Entry point for the QUnit tests. qunit.css QUnit stylesheet. qunit.js QUnit JavaScript testing framework application. tests-eventpage.js QUnit tests for ext/scripts/eventpage.js . tests-functions.js QUnit tests for ext/scripts/functions.js . tests-options.js QUnit tests for ext/scripts/options.js . tests-parse_ansi.js QUnit tests for ext/scripts/parse_ansi.js . tests-parse_dos.js QUnit tests for ext/scripts/parse_dos.js . tests-retrotxt.js QUnit tests for ext/scripts/retrotxt.js . ext/manifest.json In use, Extension manifest file containing read-only metadata and configuration options. ext/.web-ext-chrome.js web-ext configuration file for packaging a Chrome distribution package. ext/.web-ext-firefox.js web-ext configuration file for packaging a Firefox distribution and all other web-ext commands.","title":"How to use"},{"location":"source_code/#download","text":"Download the RetroTxt source code onto your local computer. Run the following Git or gh command in a terminal. git gh git clone https://github.com/bengarrett/RetroTxt.git gh repo clone bengarrett/RetroTxt","title":"Download"},{"location":"source_code/#install-build-dependencies-with-yarn","text":"Yarn package manager . cd RetroTxt yarn If the installation of the tools is successful, this command should return the web-ext version number. yarn run web-ext --version","title":"Install build dependencies with yarn"},{"location":"source_code/#convert-and-compact-a-truetype-font-into-woff2-for-use-by-retrotxt","text":"wawoff2 tool . yarn run font mona.ttf mona.woff2 Windows Windows users may need to edit package.json \"scripts\" : { \"font\" : \"woff2_compress.js.cmd\" }","title":"Convert and compact a Truetype font into WOFF2 for use by RetroTxt."},{"location":"source_code/#run-retrotxt-in-firefox-with-automatic-extension-reloading","text":"Web-ext command line tool to help build, run, and test WebExtensions. For this to work Firefox needs to be installed on your computer and then RetroTxt on Firefox will reload whenever a change is made to this source code. cp ext/json/manifest_firefox.json ext/manifest.json yarn run web-ext run -s = ext","title":"Run RetroTxt in Firefox with automatic extension reloading."},{"location":"source_code/#analyse-the-source-code-for-any-errors-using-mozillas-web-ext-lint-tool","text":"cp ext/json/manifest_firefox.json ext/manifest.json yarn run web-ext lint -s = ext","title":"Analyse the source code for any errors using Mozilla's web-ext lint tool."},{"location":"source_code/#use-on-chrome-edge-brave-and-chromium","text":"I suggest that you create a new user profile for use and to edit the Extension. Open a new tab and type in the address of the Extension. Chrome Edge Brave chrome://extensions edge://extensions brave://extensions In the Extensions tab, toggle Developer mode Click the Load unpacked button Navigate to the local directory containing the RetroTxt source code and select OK RetroTxt should load. The Options link behind the Details button and allows you to configure RetroTxt styling and behaviour. Chrome Edge Chrome Extensions developer mode Edge Extensions developer mode","title":"Use on Chrome, Edge, Brave and Chromium"},{"location":"source_code/#use-on-firefox","text":"Firefox is locked down and doesn't permit the loading of extensions outside of the Firefox Add-ons page. Mozilla's web-ext tool is the easiest method to bypass this with a dedicated web page but requires Node.js. Install Node.js if needed cd RetroTxt into the cloned RetroTxt directory Copy the Firefox manifest cp ext/json/manifest_firefox.json ext/manifest.json yarn to install web-ext and dependencies yarn run web-ext run -s=ext to load RetroTxt in Firefox with automatic extension reloading yarn run web-ext run -s = ext Applying config file: ./package.json Running web extension from /RetroTxt/ext Use --verbose or open Tools > Web Developer > Browser Console to see logging Installed /RetroTxt/ext as a temporary add-on The extension will reload if any source file changes Press R to reload (and Ctrl-C to quit) To restore the the Chrome manifest after you have quit Firefox. cp ext/json/manifest_chrome.json ext/manifest.json","title":"Use on Firefox"},{"location":"source_code/#use-on-firefox-developer-edition","text":"Edit ext/.web-ext-firefox.js Update Original \"run\" : { \"firefox\" : \"firefox\" } Replacement \"run\" : { \"firefox\" : \"firefoxdeveloperedition\" } Follow the above Use on Firefox instructions","title":"Use on Firefox Developer Edition"},{"location":"source_code/#directory-and-file-structure","text":"These are the directories and files that comprise of RetroTxt. .github/ Github repo settings. .vscode/ Workspace settings for Visual Studio Code . docs/ Documentation in Material for MkDocs markdown. fonts/ Original font packages with documentation and licences. .eslintrc.json ESLint configuration file . .gitattributes The Git settings file for this repository. .gitignore The Git file to exclude items from being checked into this repository. LICENSE A copy of the GNU Lesser General Public License , Version 3. package.json Yarn configuration file (npm compatible). ext/ The RetroTxt Extension root directory. ext/_locales/ Spelling differences for the UK and US English. ext/_locales/en_US/messages.json Also includes shared variables for remote URLs and BBS software names. ext/assets/snaps/ PNG screenshots used by the Options samples tab. ext/assets/svg/material-icons.svg SVG icons for the Options tab. ext/assets/ PNG icons for RetroTxt. ext/css/ Extension Cascading Style Sheets in CSS3 syntax. bulma.min.css Bulma CSS framework used by the Options tab. fonts_home.css Font faces and classes for the _Home computers_fonts. fonts_ibm.css Font faces and classes for the IBM PC & family fonts. fonts_modern.css Font faces and classes for the Modern fonts. layout.css Base elements styles. options.css Styles specific for the Options tab. retrotxt_loader.css An animated spinner to display during the RetroTxt processing. retrotxt.css Scanlines, text size, the Mona font face and cursor stylings. text_animation-off.css For the Blinking cursor and text off Option. text_colors_4bit-ice.css ANSI Select Graphic Rendition iCE Color classes. text_colors_4bit.css ANSI Select Graphic Rendition colour classes. text_colors_8bit.css Xterm 256 colours for ANSI colour classes. text_colors_bbs.css Shared BBS colours and font styles. text_colors_blink.css Simulate terminal blinking text. text_colors_c64.css Commodore 64 ANSI color pallete. text_colors_cga_0.css CGA 0 ANSI color pallete. text_colors_cga_1.css CGA 1 ANSI color pallete. text_colors_gray.css Monochrome ANSI color pallete. text_colors_iigs.css Apple IIGS ANSI color pallete. text_colors_pcboard.css PCBoard BBS colour classes. text_colors_pipe.css Renegade BBS and other BBS software colours. text_colors_vga.css VGA ANSI color pallete. text_colors_workbench.css Amiga Workbench ANSI color pallete. text_colors_wviv-pipe.css WVIV BBS and other BBS software colours. text_colors_xterm.css Xterm ANSI color pallete. text_colors.css Colours, text pair classes. text_ecma_48.css ANSI Select Graphic Rendition function classes. text_pagewrap.css For the ANSI Page wrap on option. ext/fonts/ Compressed fonts used in RetroTxt. ext/html/options.html HTML5 template for the Options page. ext/json/ JSON, human-readable data stores. manifest_chrome.json Extension manifest file for Chromium based browsers. manifest_firefox.json Extension manifest file for Firefox browsers. ext/scripts/ Extension JavaScripts in ES6+ (ES2015) syntax. eventpage.js Background functions and listeners that are completely isolated from all other scripts. functions.js Shared functions accessible to non-isolated scripts. options.js Isolated functions for the Options page located at ext/html/options.html . parse_ansi.js Functions to handle ANSI and ECMA-48 controls. parse_dos.js Functions to handle text encodings and DOS code pages. retrotxt.js Invokes RetroTxt, handles the browser page display and SAUCE metadata. ext/test/ Unit and sample test files. example_files/ ASCII and ANSI text test cases for use with the files:/// protocol. example_files/bbs_sheets/ BBS text test cases for use with the files:/// protocol. index.html Entry point for the QUnit tests. qunit.css QUnit stylesheet. qunit.js QUnit JavaScript testing framework application. tests-eventpage.js QUnit tests for ext/scripts/eventpage.js . tests-functions.js QUnit tests for ext/scripts/functions.js . tests-options.js QUnit tests for ext/scripts/options.js . tests-parse_ansi.js QUnit tests for ext/scripts/parse_ansi.js . tests-parse_dos.js QUnit tests for ext/scripts/parse_dos.js . tests-retrotxt.js QUnit tests for ext/scripts/retrotxt.js . ext/manifest.json In use, Extension manifest file containing read-only metadata and configuration options. ext/.web-ext-chrome.js web-ext configuration file for packaging a Chrome distribution package. ext/.web-ext-firefox.js web-ext configuration file for packaging a Firefox distribution and all other web-ext commands.","title":"Directory and file structure"},{"location":"technical/","text":"Technical specifications on supported text Input code pages and text encoding Regardless of the source, JavaScript converts all the text it handles into UTF-16. UTF-16 is based on Unicode and is compatible with UTF-8, and backwards compatible with ISO-8859-1 and US-ASCII. But otherwise, all other loaded text needs to be transcoded to display all characters accurately. Character set Support About US-ASCII Browser The original text encoding of the Internet, also known as ANSI X3.4 or ISO 646 CP-437 Yes The most common encoding for ASCII, ANSI art and MS-DOS text CP-1252 Yes Also called Windows-1252 or Windows ANSI, it's backwards compatible with ISO-8859-1 and was the default encoding for legacy Windows ISO-8859-1 Browser The replacement for US-ASCII that supported twice as many characters and was the default encoding for the Commodore Amiga and legacy Linux ISO-8859-15 Yes A replacement for ISO-8859-1 that added some missing characters such as the \u20ac sign SHIFT JIS Browser A legacy Japanese encoding used by Shift JIS art UTF-8 Browser The current standard encoding for HTML4/5 and many documents, it supports over a hundred thousand characters UTF-16 Browser The Unicode implementation used by JavaScript and many documents not written in the Latin alphabet CP-1250, CP-1251, ISO-8859-5 Yes Encodings that are mistakenly used by Chromium when viewing ANSI and ASCII art BBS colour codes BBS colour codes from the early 1990s were a natural means of applying colour to text served in bulletin board system user interfaces. Format Support Notes Celerity pipe | codes Yes PCBoard @ codes Yes Renegade pipe | codes Yes Synchronet \u263a codes No Uses /x01 Telegard ` codes Yes Wildcat! @ codes Yes WWIV heart \u2665 codes Yes Uses /x03 WWIV pipe |# codes Yes WWIV pipe | colors Yes Input control sequences Control sequences are strings of characters embedded into the text as cursor, display and presentation functions. ANSI art uses control sequences for both its colourisation and cursor positioning, as do remote terminals used by many Linux and Unix systems such as xterm . Standard Support Notes ANSI.SYS Partial MS-DOS command prompt driver commonly used with ANSI art ECMA-6 Partial Also known as US-ASCII or ANSI X3.4 C0 controls ECMA-48 Partial Also known as ANSI escape codes , ANSI X3.64, VT-100, ISO 6429 ANSI.SYS support Microsoft's MS-DOS ANSI.SYS driver supported a limited subset of ANSI X3.64 control sequences and introduced some non-standard functions. Most ANSI art uses sequences that target the ANSI.SYS implementation of text controls. RetroTxt recognises all ANSI.SYS control sequences but skips those that it doesn't support. Control Support Notes Cursor Position Partial Supports forward and down only Cursor Up No Cursor Down Yes Cursor Forward Yes Cursor Backward No Save cursor position No Restore cursor position No Erase display Yes Erase line Yes Set Graphics Mode Yes All colours and attributes are supported Set Mode / Reset Mode Yes RetroTxt changes the font type and column width but does not attempt to simulate the screen resolution Set Mode / Reset Mode 7 Yes Set and disable line wrapping Set Keyboard Strings No SAUCE support SAUCE created by Olivier \"Tasmaniac\" Reubens of ACiD is a metadata protocol for scene artworks. These are parsed by RetroTxt to determine text formatting and also authorship results shown in the Text & font information header. Name Used Displayed Notes ID Yes No Version Yes No Title Yes Yes Author Yes Yes Group Yes Yes Date Yes Yes FileSize No DataType No FileType No TInfo1 Partial Yes When it exists it is used to set Character width (columns of text) TInfo2 No TInfo3 No TInfo4 No Comments Yes Yes TFlags Partial Yes See ANSiFlags below TInfoS Partial Yes ANSiFlags ANSiFlags allow an author of ANSi and similar files to provide a clue to a viewer/editor how to render the image . Flag Name Used Notes B Non-blink mode Yes iCE colors LS Letter-spacing Yes AR Aspect Ratio No ECMA-48 support ECMA-48 forms the basis of ISO 6429, both of which are the current and acceptable standards for text control sequences. ECMA-48 expands on ANSI X3.64 (withdrawn 1997) which first popularised escape sequences in the late 1970s with the DEC VT100 computer. The following chart lists the limited ECMA-48 sequences that RetroTxt supports. Control Acronym Value Support Notes Cursor Forward Tabulation CHT Yes Acts as 4 forward movements Cursor Down CUD Yes Cursor Forward CUF Yes Cursor Position CUP Partial Supports forward and down only Erase in Display ED to end of page ED 0 Partial Only goes to the end of the line to beginning of page ED 1 Yes erase all ED 2 Yes Erase in Line EL to end of line EL 0 Yes erase line to cursor EL 1 No erase whole line EL 2 Yes Horizontal Vertical Position HVP Partial Supports forward and down only Select Graphic Rendition SGR bold SGR 1 Yes faint SGR 2 Yes italic SGR 3 Yes underline SGR 4 Yes blink slow SGR 5 Yes blink fast SGR 6 Yes inverse SGR 7 Yes conceal SGR 8 Yes crossed out SGR 9 Yes font normal SGR 10 Yes alternative font 1 SGR 11 Yes IBM BIOS alternative font 2 SGR 12 Yes IBM CGA alternative font 3 SGR 13 Yes IBM CGA thin alternative font 4 SGR 14 Yes Commodore Amiga Topaz alternative font 5 SGR 15 Yes IBM EGA 8x14 alternative font 6 SGR 16 Yes IBM EGA 9x14 alternative font 7 SGR 17 Yes IBM VGA 8x14 alternative font 8 SGR 18 Yes IBM VGA 9x14 alternative font 9 SGR 19 Yes IBM MDA Fraktur font SGR 20 Yes Germanic Gothic font Eagle Spirit PC Alt 3 fantasy inspired font double underline SGR 21 Yes not bold nor faint SGR 22 Yes not italic nor Fraktur SGR 23 Yes not underline SGR 24 Yes steady SGR 25 Yes No blinking positive image SGR 27 Yes Not inverse revealed characters SGR 28 Yes Not concealed not crossed out SGR 29 Yes foreground colours SGR 30\u202637 Yes foreground 256 colours SGR 38;5;0\u2026255 Yes Known as xterm 256 but not an ECMA-48 standard foreground RGB colours SGR 38;2;R;G;B; Yes ISO-8613-3 24-bit colour support, not an ECMA-48 standard revert to default foreground SGR 39 Yes background colours SGR 40\u202647 Yes background 256 colours SGR 48;5;0\u2026255 Yes Known as xterm 256 but not an ECMA-48 standard background RGB colours SGR 48;2;R;G;B; Yes ISO-8613-3 24-bit colour support, not an ECMA-48 standard revert to default background SGR 49 Yes framed SGR 51 Yes encircled SGR 52 Yes overlined SGR 53 Yes not framed nor encircled SGR 54 Yes not overlined SGR 55 Yes bold foreground colours SGR 90\u202697 Yes Non-standard IBM AIX terminal bright background colours SGR 100\u2026107 Yes Non-standard IBM AIX terminal (* requires iCE colours to be enabled) Miscellaneous support Other common non-standard sequences agreed to by the ANSI art community Control Acronym Value Support Notes background RGB colours - 0;R;G;Bt Yes PabloDraw 2014 24-bit ANSI implementation foreground RGB colours - 1;R;G;Bt Yes PabloDraw 2014 24-bit ANSI implementation Blink to Bright Intensity Background - ?33h Yes SyncTERM Blink normal - ?33l Yes SyncTERM","title":"Supported standards"},{"location":"technical/#technical-specifications-on-supported-text","text":"","title":"Technical specifications on supported text"},{"location":"technical/#input-code-pages-and-text-encoding","text":"Regardless of the source, JavaScript converts all the text it handles into UTF-16. UTF-16 is based on Unicode and is compatible with UTF-8, and backwards compatible with ISO-8859-1 and US-ASCII. But otherwise, all other loaded text needs to be transcoded to display all characters accurately. Character set Support About US-ASCII Browser The original text encoding of the Internet, also known as ANSI X3.4 or ISO 646 CP-437 Yes The most common encoding for ASCII, ANSI art and MS-DOS text CP-1252 Yes Also called Windows-1252 or Windows ANSI, it's backwards compatible with ISO-8859-1 and was the default encoding for legacy Windows ISO-8859-1 Browser The replacement for US-ASCII that supported twice as many characters and was the default encoding for the Commodore Amiga and legacy Linux ISO-8859-15 Yes A replacement for ISO-8859-1 that added some missing characters such as the \u20ac sign SHIFT JIS Browser A legacy Japanese encoding used by Shift JIS art UTF-8 Browser The current standard encoding for HTML4/5 and many documents, it supports over a hundred thousand characters UTF-16 Browser The Unicode implementation used by JavaScript and many documents not written in the Latin alphabet CP-1250, CP-1251, ISO-8859-5 Yes Encodings that are mistakenly used by Chromium when viewing ANSI and ASCII art","title":"Input code pages and text encoding"},{"location":"technical/#bbs-colour-codes","text":"BBS colour codes from the early 1990s were a natural means of applying colour to text served in bulletin board system user interfaces. Format Support Notes Celerity pipe | codes Yes PCBoard @ codes Yes Renegade pipe | codes Yes Synchronet \u263a codes No Uses /x01 Telegard ` codes Yes Wildcat! @ codes Yes WWIV heart \u2665 codes Yes Uses /x03 WWIV pipe |# codes Yes WWIV pipe | colors Yes","title":"BBS colour codes"},{"location":"technical/#input-control-sequences","text":"Control sequences are strings of characters embedded into the text as cursor, display and presentation functions. ANSI art uses control sequences for both its colourisation and cursor positioning, as do remote terminals used by many Linux and Unix systems such as xterm . Standard Support Notes ANSI.SYS Partial MS-DOS command prompt driver commonly used with ANSI art ECMA-6 Partial Also known as US-ASCII or ANSI X3.4 C0 controls ECMA-48 Partial Also known as ANSI escape codes , ANSI X3.64, VT-100, ISO 6429","title":"Input control sequences"},{"location":"technical/#ansisys-support","text":"Microsoft's MS-DOS ANSI.SYS driver supported a limited subset of ANSI X3.64 control sequences and introduced some non-standard functions. Most ANSI art uses sequences that target the ANSI.SYS implementation of text controls. RetroTxt recognises all ANSI.SYS control sequences but skips those that it doesn't support. Control Support Notes Cursor Position Partial Supports forward and down only Cursor Up No Cursor Down Yes Cursor Forward Yes Cursor Backward No Save cursor position No Restore cursor position No Erase display Yes Erase line Yes Set Graphics Mode Yes All colours and attributes are supported Set Mode / Reset Mode Yes RetroTxt changes the font type and column width but does not attempt to simulate the screen resolution Set Mode / Reset Mode 7 Yes Set and disable line wrapping Set Keyboard Strings No","title":"ANSI.SYS support"},{"location":"technical/#sauce-support","text":"SAUCE created by Olivier \"Tasmaniac\" Reubens of ACiD is a metadata protocol for scene artworks. These are parsed by RetroTxt to determine text formatting and also authorship results shown in the Text & font information header. Name Used Displayed Notes ID Yes No Version Yes No Title Yes Yes Author Yes Yes Group Yes Yes Date Yes Yes FileSize No DataType No FileType No TInfo1 Partial Yes When it exists it is used to set Character width (columns of text) TInfo2 No TInfo3 No TInfo4 No Comments Yes Yes TFlags Partial Yes See ANSiFlags below TInfoS Partial Yes","title":"SAUCE support"},{"location":"technical/#ansiflags","text":"ANSiFlags allow an author of ANSi and similar files to provide a clue to a viewer/editor how to render the image . Flag Name Used Notes B Non-blink mode Yes iCE colors LS Letter-spacing Yes AR Aspect Ratio No","title":"ANSiFlags"},{"location":"technical/#ecma-48-support","text":"ECMA-48 forms the basis of ISO 6429, both of which are the current and acceptable standards for text control sequences. ECMA-48 expands on ANSI X3.64 (withdrawn 1997) which first popularised escape sequences in the late 1970s with the DEC VT100 computer. The following chart lists the limited ECMA-48 sequences that RetroTxt supports. Control Acronym Value Support Notes Cursor Forward Tabulation CHT Yes Acts as 4 forward movements Cursor Down CUD Yes Cursor Forward CUF Yes Cursor Position CUP Partial Supports forward and down only Erase in Display ED to end of page ED 0 Partial Only goes to the end of the line to beginning of page ED 1 Yes erase all ED 2 Yes Erase in Line EL to end of line EL 0 Yes erase line to cursor EL 1 No erase whole line EL 2 Yes Horizontal Vertical Position HVP Partial Supports forward and down only Select Graphic Rendition SGR bold SGR 1 Yes faint SGR 2 Yes italic SGR 3 Yes underline SGR 4 Yes blink slow SGR 5 Yes blink fast SGR 6 Yes inverse SGR 7 Yes conceal SGR 8 Yes crossed out SGR 9 Yes font normal SGR 10 Yes alternative font 1 SGR 11 Yes IBM BIOS alternative font 2 SGR 12 Yes IBM CGA alternative font 3 SGR 13 Yes IBM CGA thin alternative font 4 SGR 14 Yes Commodore Amiga Topaz alternative font 5 SGR 15 Yes IBM EGA 8x14 alternative font 6 SGR 16 Yes IBM EGA 9x14 alternative font 7 SGR 17 Yes IBM VGA 8x14 alternative font 8 SGR 18 Yes IBM VGA 9x14 alternative font 9 SGR 19 Yes IBM MDA Fraktur font SGR 20 Yes Germanic Gothic font Eagle Spirit PC Alt 3 fantasy inspired font double underline SGR 21 Yes not bold nor faint SGR 22 Yes not italic nor Fraktur SGR 23 Yes not underline SGR 24 Yes steady SGR 25 Yes No blinking positive image SGR 27 Yes Not inverse revealed characters SGR 28 Yes Not concealed not crossed out SGR 29 Yes foreground colours SGR 30\u202637 Yes foreground 256 colours SGR 38;5;0\u2026255 Yes Known as xterm 256 but not an ECMA-48 standard foreground RGB colours SGR 38;2;R;G;B; Yes ISO-8613-3 24-bit colour support, not an ECMA-48 standard revert to default foreground SGR 39 Yes background colours SGR 40\u202647 Yes background 256 colours SGR 48;5;0\u2026255 Yes Known as xterm 256 but not an ECMA-48 standard background RGB colours SGR 48;2;R;G;B; Yes ISO-8613-3 24-bit colour support, not an ECMA-48 standard revert to default background SGR 49 Yes framed SGR 51 Yes encircled SGR 52 Yes overlined SGR 53 Yes not framed nor encircled SGR 54 Yes not overlined SGR 55 Yes bold foreground colours SGR 90\u202697 Yes Non-standard IBM AIX terminal bright background colours SGR 100\u2026107 Yes Non-standard IBM AIX terminal (* requires iCE colours to be enabled)","title":"ECMA-48 support"},{"location":"technical/#miscellaneous-support","text":"Other common non-standard sequences agreed to by the ANSI art community Control Acronym Value Support Notes background RGB colours - 0;R;G;Bt Yes PabloDraw 2014 24-bit ANSI implementation foreground RGB colours - 1;R;G;Bt Yes PabloDraw 2014 24-bit ANSI implementation Blink to Bright Intensity Background - ?33h Yes SyncTERM Blink normal - ?33l Yes SyncTERM","title":"Miscellaneous support"}]}